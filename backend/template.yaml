AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: NeoSpend - Personal Finance Tracker with Analytics Dashboard

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Environment:
      Variables:
        EXPENSES_TABLE_NAME: !Ref ExpensesTable
        BUDGETS_TABLE_NAME: !Ref BudgetsTable
        CATEGORIES_TABLE_NAME: !Ref CategoriesTable

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]

Resources:
  # DynamoDB Tables
  ExpensesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: NeoSpend-Expenses
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: expenseId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: category
          AttributeType: S
        - AttributeName: date
          AttributeType: S
      KeySchema:
        - AttributeName: expenseId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: category
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: DateIndex
          KeySchema:
            - AttributeName: date
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  BudgetsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: NeoSpend-Budgets
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: budgetId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: category
          AttributeType: S
      KeySchema:
        - AttributeName: budgetId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: category
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  CategoriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: NeoSpend-Categories
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: categoryId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: categoryId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: NameIndex
          KeySchema:
            - AttributeName: name
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: NeoSpendUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: neospend-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      UserPoolId: !Ref UserPool
      CallbackURLs:
        - http://localhost:3000/api/auth/callback/cognito
        - https://your-domain.com/api/auth/callback/cognito
      LogoutURLs:
        - http://localhost:3000
        - https://your-domain.com

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub neospend-${AWS::AccountId}-${AWS::Region}
      UserPoolId: !Ref UserPool

  # API Gateway
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: NeoSpend-API
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - http://localhost:3000
          - https://your-domain.com
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - Authorization
          - X-Amz-Date
          - X-Api-Key
          - X-Amz-Security-Token

  # Cognito Authorizer
  CognitoAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: CognitoJWTAuthorizer
      ApiId: !Ref HttpApi
      AuthorizerType: JWT
      IdentitySource:
        - $request.header.Authorization
      JwtConfiguration:
        Audience:
          - !Ref UserPoolClient
        Issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}

  # Lambda Functions
  ExpensesFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: NeoSpend-Expenses
      CodeUri: src/expenses/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExpensesTable
      Events:
        GetExpenses:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /expenses
            Method: get
            Auth:
              Authorizer: !Ref CognitoAuthorizer
        PostExpenses:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /expenses
            Method: post
            Auth:
              Authorizer: !Ref CognitoAuthorizer
        PutExpenses:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /expenses/{id}
            Method: put
            Auth:
              Authorizer: !Ref CognitoAuthorizer
        DeleteExpenses:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /expenses/{id}
            Method: delete
            Auth:
              Authorizer: !Ref CognitoAuthorizer

  BudgetsFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: NeoSpend-Budgets
      CodeUri: src/budgets/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BudgetsTable
      Events:
        GetBudgets:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /budgets
            Method: get
            Auth:
              Authorizer: !Ref CognitoAuthorizer
        PostBudgets:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /budgets
            Method: post
            Auth:
              Authorizer: !Ref CognitoAuthorizer
        PutBudgets:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /budgets/{id}
            Method: put
            Auth:
              Authorizer: !Ref CognitoAuthorizer
        DeleteBudgets:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /budgets/{id}
            Method: delete
            Auth:
              Authorizer: !Ref CognitoAuthorizer

  CategoriesFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: NeoSpend-Categories
      CodeUri: src/categories/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
      Events:
        GetCategories:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /categories
            Method: get
            Auth:
              Authorizer: !Ref CognitoAuthorizer
        PostCategories:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /categories
            Method: post
            Auth:
              Authorizer: !Ref CognitoAuthorizer
        PutCategories:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /categories/{id}
            Method: put
            Auth:
              Authorizer: !Ref CognitoAuthorizer
        DeleteCategories:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /categories/{id}
            Method: delete
            Auth:
              Authorizer: !Ref CognitoAuthorizer

  AnalyticsFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: NeoSpend-Analytics
      CodeUri: src/analytics/
      Handler: index.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ExpensesTable
      Events:
        GetAnalytics:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /analytics
            Method: get
            Auth:
              Authorizer: !Ref CognitoAuthorizer

Outputs:
  ApiBaseUrl:
    Description: API Gateway endpoint URL
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com
    Export:
      Name: !Sub ${AWS::StackName}-ApiBaseUrl

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolId

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolClientId

  UserPoolDomain:
    Description: Cognito User Pool Domain
    Value: !Ref UserPoolDomain
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolDomain

  CognitoIssuerUrl:
    Description: Cognito Issuer URL
    Value: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
    Export:
      Name: !Sub ${AWS::StackName}-CognitoIssuerUrl
